from PyQt5 import QtWebKitWidgets as QtWebKitWidgets
from PyQt5.QtWebKitWidgets import QWebPage, QWebView
from _typeshed import Incomplete
from qtpy import QtCore
from qtpy.QtWidgets import QMainWindow
from webview import FOLDER_DIALOG as FOLDER_DIALOG, OPEN_DIALOG as OPEN_DIALOG, SAVE_DIALOG as SAVE_DIALOG, windows as windows
from webview.js.css import disable_text_select as disable_text_select
from webview.menu import Menu as Menu, MenuAction as MenuAction, MenuSeparator as MenuSeparator
from webview.screen import Screen as Screen
from webview.util import DEFAULT_HTML as DEFAULT_HTML, create_cookie as create_cookie, environ_append as environ_append, js_bridge_call as js_bridge_call, parse_api_js as parse_api_js
from webview.window import FixPoint as FixPoint, Window as Window

logger: Incomplete
settings: Incomplete
renderer: str
is_webengine: bool

class BrowserView(QMainWindow):
    instances: Incomplete
    inspector_port: Incomplete
    global_menubar_top_menus: Incomplete
    global_menubar_other_objects: Incomplete
    global_menubar: Incomplete
    create_window_trigger: Incomplete
    set_title_trigger: Incomplete
    load_url_trigger: Incomplete
    html_trigger: Incomplete
    confirmation_dialog_trigger: Incomplete
    file_dialog_trigger: Incomplete
    destroy_trigger: Incomplete
    hide_trigger: Incomplete
    show_trigger: Incomplete
    fullscreen_trigger: Incomplete
    window_size_trigger: Incomplete
    window_move_trigger: Incomplete
    window_minimize_trigger: Incomplete
    window_restore_trigger: Incomplete
    current_url_trigger: Incomplete
    evaluate_js_trigger: Incomplete
    on_top_trigger: Incomplete
    class JSBridge(QtCore.QObject):
        qtype: Incomplete
        def __init__(self) -> None: ...
        def call(self, func_name, param, value_id): ...
    class WebView(QWebView):
        transparent: Incomplete
        def __init__(self, parent: Incomplete | None = None) -> None: ...
        def contextMenuEvent(self, event) -> None: ...
        def show_inspector(self) -> None: ...
        drag_pos: Incomplete
        def mousePressEvent(self, event) -> None: ...
        def mouseMoveEvent(self, event) -> None: ...
        def eventFilter(self, object, event): ...
    class NavigationHandler(QWebPage):
        def __init__(self, parent: Incomplete | None = None) -> None: ...
        def acceptNavigationRequest(self, url, type, is_main_frame): ...
    class WebPage(QWebPage):
        nav_handler: Incomplete
        def __init__(self, parent: Incomplete | None = None, profile: Incomplete | None = None) -> None: ...
        def onFeaturePermissionRequested(self, url, feature) -> None: ...
        def acceptNavigationRequest(self, frame, request, type): ...
        def userAgentForUrl(self, url): ...
        def createWindow(self, type): ...
    uid: Incomplete
    pywebview_window: Incomplete
    js_bridge: Incomplete
    is_fullscreen: bool
    text_select: Incomplete
    loaded: Incomplete
    shown: Incomplete
    localization: Incomplete
    screen: Incomplete
    title: Incomplete
    background_color: Incomplete
    frameless: Incomplete
    easy_drag: Incomplete
    transparent: Incomplete
    view: Incomplete
    profile: Incomplete
    cookies: Incomplete
    channel: Incomplete
    def __init__(self, window) -> None: ...
    def on_set_title(self, title) -> None: ...
    def on_confirmation_dialog(self, title, message, uuid) -> None: ...
    def on_file_dialog(self, dialog_type, directory, allow_multiple, save_filename, file_filter) -> None: ...
    def on_cookie_added(self, cookie) -> None: ...
    def on_cookie_removed(self, cookie) -> None: ...
    def on_current_url(self) -> None: ...
    def on_load_url(self, url) -> None: ...
    def on_load_html(self, content, base_uri) -> None: ...
    def on_set_on_top(self, top) -> None: ...
    def closeEvent(self, event) -> None: ...
    def changeEvent(self, e) -> None: ...
    def resizeEvent(self, e) -> None: ...
    def eventFilter(self, object, event): ...
    def on_show_window(self) -> None: ...
    def on_hide_window(self) -> None: ...
    def on_destroy_window(self) -> None: ...
    def on_fullscreen(self) -> None: ...
    def on_window_size(self, width, height, fix_point) -> None: ...
    def on_window_move(self, x, y) -> None: ...
    def on_window_minimize(self) -> None: ...
    def on_window_restore(self) -> None: ...
    def on_evaluate_js(self, script, uuid) -> None: ...
    def on_load_finished(self) -> None: ...
    def set_title(self, title) -> None: ...
    def get_cookies(self): ...
    def get_current_url(self): ...
    def load_url(self, url) -> None: ...
    def load_html(self, content, base_uri) -> None: ...
    def create_confirmation_dialog(self, title, message): ...
    def create_file_dialog(self, dialog_type, directory, allow_multiple, save_filename, file_filter): ...
    def hide_(self) -> None: ...
    def show_(self) -> None: ...
    def destroy_(self) -> None: ...
    def toggle_fullscreen(self) -> None: ...
    def resize_(self, width, height, fix_point) -> None: ...
    def move_window(self, x, y) -> None: ...
    def minimize(self) -> None: ...
    def restore(self) -> None: ...
    def set_on_top(self, top) -> None: ...
    def evaluate_js(self, script): ...
    @staticmethod
    def on_create_window(func) -> None: ...

def setup_app() -> None: ...
def create_window(window) -> None: ...
def set_title(title, uid) -> None: ...
def get_cookies(uid): ...
def get_current_url(uid): ...
def load_url(url, uid) -> None: ...
def load_html(content, base_uri, uid) -> None: ...
def set_app_menu(app_menu_list): ...
def get_active_window(): ...
def destroy_window(uid) -> None: ...
def hide(uid) -> None: ...
def show(uid) -> None: ...
def minimize(uid) -> None: ...
def restore(uid) -> None: ...
def toggle_fullscreen(uid) -> None: ...
def set_on_top(uid, top) -> None: ...
def resize(width, height, uid, fix_point) -> None: ...
def move(x, y, uid) -> None: ...
def create_confirmation_dialog(title, message, uid): ...
def create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid): ...
def evaluate_js(script, uid): ...
def get_position(uid): ...
def get_size(uid): ...
def get_screens(): ...
def add_tls_cert(certfile) -> None: ...
